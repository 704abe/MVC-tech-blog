<div class="row">
  <a class="back-button" onclick="history.back()" style="cursor:pointer"><p class="text-light">< Back</p></a>
</div>
<div class="d-flex row col-12 flex-row">
  <div class="post-card card col-12">
    <div class="text-left p-3">
      <h2 class="text-muted">{{title}}</h2>
      <p class="fw-bold">{{content}}</p>
      <p class="text-muted">Created by {{user.username}} on {{format_date date_created}}</p>
    </div>
  </div>
  <div class="comment-input card col-12 bg-light">
    <form class="comment-form p-3">
      {{!-- <input class="form-input post-comment form-control p-1" type="text" name="comment-content" placeholder="Leave a comment..." /> --}}
      <textarea id="comment-input" class="form-input post-comment form-control p-1" type="text" name="comment-content" rows="2" placeholder="Leave a comment..."></textarea>
      <div class="pt-3">
        <button id="comment-button" class="btn btn-primary" type="submit">Comment</button>
      </div>
    </form>
  </div>
  {{#each comments as |comment|}}
  <div class="comment card">
    <div class="p-3">
      <p class="text-muted"><i class="fa fa-user-circle-o" aria-hidden="true"></i>  {{user.username}} â€¢ {{format_date date_created}}</p>
      <p class="fw-bold">{{comment.content}}</p>
    </div>
  </div>
  {{/each}}
  <div class="comment-footer card bg-light"></div>
</div>

{{#if logged_in}}
<script>
  const handleCommentSubmit = async (event) => {
    event.preventDefault();
    console.log(event);

    let urlString = window.location.toString().split('/');
    // console.log('urlString', urlString);
    let post_id = urlString[urlString.length - 1];
    // console.log('post_id', post_id);

    let content = document.querySelector('#comment-input').value.trim();
    console.log(JSON.stringify({ content, post_id }));
    if (content) {
      const response = await fetch(`/api/comment/`, {
        method: 'POST',
        body: JSON.stringify({ 
          content,
          post_id
        }),
        headers: {
          'Content-Type': 'application/json',
        },
      });
      console.log(response);

      if (response.ok) {
        console.log('response.ok line 59');
        location.reload();
      } else {
        console.log('hello');
      }
    } else {
        Swal.fire({
          position: 'center',
          icon: 'error',
          title: 'Please enter a comment',
          showConfirmButton: true,
          timer: 1500,
          confirmButtonColor: '#0d6efd'
        })
    }
  }

  document.querySelector('.comment-form').addEventListener('submit', handleCommentSubmit)

</script>
{{else}}
<script>
  const handleCommentSubmit = async () => {
    Swal.fire({
      title: 'Log in or sign up to leave a comment',
      showCancelButton: true,
      confirmButtonText: 'Login/Signup',
      confirmButtonColor: '#0d6efd',
      cancelButtonText: `No thanks`,
    }).then((result) => {
      /* Read more about isConfirmed, isDenied below */
      if (result.isConfirmed) {
        document.location.replace('/login');
      }
    })
    document.querySelector('#comment-input').blur()
  }

  const handleCommentClick = async (event) => {
    event.preventDefault();
    
    Swal.fire({
      title: 'Log in or sign up to leave a comment',
      showCancelButton: true,
      confirmButtonText: 'Login/Signup',
      confirmButtonColor: '#0d6efd',
      cancelButtonText: `No thanks`,
    }).then((result) => {
      /* Read more about isConfirmed, isDenied below */
      if (result.isConfirmed) {
        document.location.replace('/login');
      }
    })
  }

  document.querySelector('#comment-input').addEventListener('click', handleCommentSubmit)
  document.querySelector('#comment-button').addEventListener('click', handleCommentClick)

</script>
{{/if}}